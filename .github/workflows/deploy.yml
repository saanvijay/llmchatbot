name: Deploy

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
  push:
    branches: [ main ]
    paths:
      - 'src/**'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'staging' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push backend image
        run: |
          cd src/backend
          docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:${{ github.sha }} .
          docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:latest .
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:${{ github.sha }}
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:latest

      - name: Build frontend
        run: |
          cd src/frontend
          npm ci
          npm run build

      - name: Deploy to environment
        run: |
          echo "Deploying to ${{ github.event.inputs.environment || 'staging' }} environment"
          
          # Example deployment commands - customize based on your infrastructure
          # For Docker Compose deployment:
          # cd src/backend
          # docker-compose -f docker-compose.yml -f docker-compose.${{ github.event.inputs.environment || 'staging' }}.yml up -d
          
          # For Kubernetes deployment:
          # kubectl set image deployment/llmchatbot-backend llmchatbot-backend=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:${{ github.sha }}
          
          # For simple server deployment:
          # rsync -avz src/frontend/build/ user@server:/var/www/html/
          
          echo "Deployment completed successfully!"

      - name: Health check
        run: |
          echo "Performing health check..."
          # Add your health check logic here
          # Example: curl -f http://your-app-url/health
          sleep 30
          echo "Health check completed"

      - name: Notify deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ Deployment to ${{ github.event.inputs.environment || 'staging' }} completed successfully!"
          else
            echo "❌ Deployment to ${{ github.event.inputs.environment || 'staging' }} failed!"
          fi 